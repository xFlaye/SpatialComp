
/*Copyright (c) 2021 by Eyal (https://codepen.io/xFlaye/pen/eYEmgxb)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

bubble code modified from: https://jsfiddle.net/prisoner849/wnash36c/ by Paul West
movement modified from: https://sbcode.net/threejs/physics-car/
*/



// SURROUND SPACE
// returns: none

// import the Three.js module:
// import the Three.js module:
import * as THREE from 'https://unpkg.com/three@0.144.0/build/three.module.js';
      import Stats from 'https://cdn.skypack.dev/three@0.144.0/examples/jsm/libs/stats.module';
      import { OrbitControls } from 'https://unpkg.com/three@0.127.0/examples/jsm/controls/OrbitControls.js';
      import dat from 'https://cdn.skypack.dev/dat.gui'
      import openSimplexNoise from 'https://cdn.skypack.dev/open-simplex-noise';
      import { GUI } from 'https://cdn.skypack.dev/dat.gui';
      import { MeshSurfaceSampler } from 'https://cdn.skypack.dev/three@0.127.0/examples/jsm/math/MeshSurfaceSampler.js';


console.clear();
console.log("Surround Space");
let outsider = 0;
let numTotal = 15;
/*
 /////// shiftr connect /////////

const client = mqtt.connect('wss://kaviproto:test@kaviproto.cloud.shiftr.io', {
        clientId: 'clientKavi'
      });

      client.on('connect', function() {
        console.log('connected!');
        client.subscribe('rsp/1');
      });

      client.on('message', function(topic, message) {
        //document.getElementById("dataflow1").innerText = message.toString();
        //const floatNumber = parseFloat(message);
        outsider = parseFloat(message);
        
        //console.log(topic + ': ' + message.toString());
        //console.log ("float: ", outsider);
        
        
        
      });

*/



/*////////////////////////////////////////*/

// setup Scene
const scene = new THREE.Scene()

// set light params
const light = new THREE.DirectionalLight();
light.position.set(25, 50, 25);
light.castShadow = true;
light.shadow.mapSize.width = 2048; //16384
light.shadow.mapSize.height = 2048; //16384
light.shadow.camera.near = 0.5;
light.shadow.camera.far = 100;
light.shadow.camera.top = 100;
light.shadow.camera.bottom = -100;
light.shadow.camera.left = -100;
light.shadow.camera.right = 100;
scene.add(light);

// ignore camerahelper for now. Too distracting
const helper = new THREE.CameraHelper(light.shadow.camera);
//scene.add(helper)

const camera = new THREE.PerspectiveCamera(
  60,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);

// Set Chase Camera and pivot point. Useful for surround Phase
const chaseCam = new THREE.Object3D();
chaseCam.position.set(0, 0, 0);
const chaseCamPivot = new THREE.Object3D();
chaseCamPivot.position.set(0, 4, 8);
chaseCam.add(chaseCamPivot);
scene.add(chaseCam);

// Render setups 
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFSoftShadowMap;
document.body.appendChild(renderer.domElement);



//ground plane
const phongMaterial = new THREE.MeshPhongMaterial();
const groundGeometry = new THREE.PlaneGeometry(100, 100);
const groundMesh = new THREE.Mesh(groundGeometry, phongMaterial);
groundMesh.rotateX(-Math.PI / 2); // align ground
groundMesh.receiveShadow = true;
scene.add(groundMesh);


// ground details
// generate random half-spheres and place them on the ground
const groundBumpMat = new THREE.MeshPhongMaterial({color: "skyblue"}); // add ", side: THREE.DoubleSide" for double-sided material
const groundBumpSphere = new THREE.SphereBufferGeometry(1, 12,12,0,Math.PI);
const bumps = new THREE.Mesh(groundBumpSphere, groundBumpMat);



for (let i = 0; i < 80; i++) {
    // creates clones of bumps
    let bumpClone

    bumpClone = bumps.clone();
    // Set clone transformations 
    bumpClone.rotation.x -= Math.PI/2; // rotated so the half-spheres are facing the right direction (up)
    bumpClone.position.x = Math.random() * 100 - 50;
    bumpClone.position.y = 0.5;
    bumpClone.position.z = Math.random() * 100 - 50;
    scene.add(bumpClone);
}


// Player setup
const playerGeometry = new THREE.BoxGeometry(1, 2, 0.5);
const playerMat = new THREE.MeshPhongMaterial({color: "red"});
const playerMesh = new THREE.Mesh(playerGeometry, playerMat);
playerMesh.position.y = 1;
playerMesh.castShadow = true;


// ! parent chaseCam to Player
playerMesh.add(chaseCam);

// ! Player bubble
//const bubbleGeometry = new THREE.SphereBufferGeometry(2,16,16);

let radius = 2;
const bubbleGeometry = new THREE.IcosahedronGeometry(2, 2);

let nPos = [];
let v3 = new THREE.Vector3();
let pos = bubbleGeometry.attributes.position;

for (let x = 0; x <pos.count; x++){
    v3.fromBufferAttribute(pos,x).normalize();
    nPos.push(v3.clone());
}
bubbleGeometry.userData.nPos = nPos;



const bubbleMat = new THREE.MeshPhongMaterial({wireframe: true});
const bubbleMesh = new THREE.Mesh(bubbleGeometry,bubbleMat);
bubbleMesh.position.y = 1;


bubbleMesh.castShadow = false;

// ! parent bubble to the Player
playerMesh.add(bubbleMesh);

// add Player + bubble to scene
scene.add(playerMesh);



// ! add noise elements
let noise = openSimplexNoise.makeNoise4D(Date.now());
let clock = new THREE.Clock();


// !-------------------------> SAMPLED MESHES
// Generate spheres on bubbleMesh using SurfaceSampler.js
// Initialize sampler
const sampler = new MeshSurfaceSampler(bubbleMesh).build();

// setup shapes for sampled meshes
const sphereGeometry = new THREE.SphereBufferGeometry(0.1, 6, 6);
const sphereMaterial = new THREE.MeshBasicMaterial({ color: "blue" });

// generate the instances

const spheres = new THREE.InstancedMesh(sphereGeometry,sphereMaterial,20);
//scene.add(spheres);

// dummy vector to store sampled random coordinates
const tempPosition = new THREE.Vector3();


// dummy object to generate the matrix of each sphere
const tempObject = new THREE.Object3D();

// set array for each point
let points = [];
points.length = 0;


// loop sampled elements
for (let i = 0; i <numTotal; i++) {
    // sample random point on the surface of bubbleMesh
    sampler.sample(tempPosition);
    // store point coordinates in tempObject
    tempObject.position.set(tempPosition.x, tempPosition.y, tempPosition.z);

    //console.log(tempObject.position.x, tempObject.position.y,tempObject.position.z);

    points.push(new THREE.Vector3(tempObject.position.x, tempObject.position.y,tempObject.position.z));
    // define a random scale for the instanced spheres
    tempObject.scale.setScalar(Math.random() * 3 + outsider);
    // update the matrix and insert it into instancedMesh matrix
    tempObject.updateMatrix();
    spheres.setMatrixAt(i, tempObject.matrix);

    
    //console.log("coords: ",i,points[i]);

    
    }	


//Create a coordinate point and add it to the array
console.log("pos spheres: ",points);

// add spheres to 
bubbleMesh.add(spheres);

console.log("num spheres", points.length);



// ! -------------------------> SAMPLED MESHES END

// todo: Create random points on Bubble and animate them using the Animate() function




// set keyboard controls
let keyMap = {};
var onDocumentKey = function (e) {
    keyMap[e.key] = e.type === 'keydown';
};

document.addEventListener('keydown', onDocumentKey, false)
document.addEventListener('keyup', onDocumentKey, false)

window.addEventListener('resize', onWindowResize, false)
function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight
    camera.updateProjectionMatrix()
    renderer.setSize(window.innerWidth, window.innerHeight)
    render()
}

const stats = Stats();
document.body.appendChild(stats.dom);

// ! GUI options for velocity controls, forward velocity and right velocity. See Update() function below
const vControls = new function(){
    this.FV = 0.0;
    this.RV = 0.0;
}

// Bubble speed multiplier
let bubbleSpec = {
    speed: 1.0
};

let planetSpheres = {
  scale: 1.0
};

let numSpheres = {
  number: 10
};

const guiOpts = {
    reset: function(){
        chaseCamPivot.position.x = 0;
        chaseCamPivot.position.y = 4;
        chaseCamPivot.position.z = 8;
    }
};

// ! adding the listen() updates the dat.gui and properly resets the values
const gui = new GUI();
gui.add(vControls, "FV", -0.20, 0.0);
const camCtrl = gui.addFolder("Cam Controls");
camCtrl.add(chaseCamPivot.position,"x", -10,10).listen();
camCtrl.add(chaseCamPivot.position,"y", 0,10).listen();
camCtrl.add(chaseCamPivot.position,"z", 0,10).listen();
camCtrl.add(guiOpts, "reset");
camCtrl.open();
const bubbleCtrl = gui.addFolder("Bubble Controls");
bubbleCtrl.add(bubbleSpec,"speed", 0.1,3).listen();
//bubbleCtrl.add(numSpheres,"number", 5,30).listen();
bubbleCtrl.add(planetSpheres, "scale", 0.1, 2).listen();

bubbleCtrl.open();
//gui.add(vControls,"RV", -0.05,0.05);


/*  BUSTED FOR NOW. NEED TO FIGURE OUT COMBO BETWEEN WASD AND ORBITCONTROLS
// ORBIT CONTROLS (use domElements)
const controls = new OrbitControls(camera, renderer.domElement);
//controls.minDistance = 20;
controls.maxDistance = 1500;
controls.maxPolarAngle = Math.PI / 2;

//controls.update();

*/

// ANIMATE
function animate() {
  requestAnimationFrame(animate)
//   render();


  helper.update()
  update();
}

// UPDATE
function update(){
    
    // set motion params
    // query time
    const clock = new THREE.Clock();
    let delta;

    // passing parameters from vControls. Should be 0 by default
    // Different approach since it's a global var. Explore options?
    let forwardVelocity = vControls.FV;
    let rightVelocity = vControls.RV;

    // set a constant delta speed
    delta = Math.min(clock.getDelta(), 0.1);

    const chaseCamPos = new THREE.Vector3();
    // set forward thrusting variable to smooth acceleration of User object
    let isThrusting = false;

    
    // set forward/back acceleration motion
    // TODO: numbers should be further tweaked, ideally with gui controls
    isThrusting = false;
        if (keyMap[87] ) { // W
            if (forwardVelocity < 100.0) playerMesh.translateZ(forwardVelocity -= .1)
            isThrusting = true;
        }
        if (keyMap[83] ) { //S
            if (forwardVelocity > -100.0) playerMesh.translateZ(forwardVelocity += .1)
            isThrusting = true;
        }

        var rotation_matrix = new THREE.Matrix4().identity();
        if (keyMap[65] ) { //A
            if (rightVelocity > -1.0) {
            playerMesh.rotateOnAxis(new THREE.Vector3(0,1,0), rightVelocity += .05);
            }
        }
        if (keyMap[68] ) { //D
            if (rightVelocity < 1.0) {
            playerMesh.rotateOnAxis(new THREE.Vector3(0,1,0), rightVelocity -= .05);
            }
        }
        
        if (keyMap[32]) {  // Space to stop 
            if (forwardVelocity > 0) {
                forwardVelocity -= 1;
            }
            if (forwardVelocity < 0) {
                forwardVelocity += 1;
            }
        }
        
        if (!isThrusting) {
            //not going forward or backwards so gradually slow down
            if (forwardVelocity > 0) {
                forwardVelocity -= 0.25;
            }
            if (forwardVelocity < 0) {
                forwardVelocity += 0.25;
            }
        }

        camera.lookAt(playerMesh.position)

        chaseCamPivot.getWorldPosition(chaseCamPos)
        if (chaseCamPos.y < 1) {
            chaseCamPos.y = 1
        }
        camera.position.lerpVectors(camera.position, chaseCamPos, 0.05)

        //render();

        stats.update();
  
        // UPDATE ROTATION OF SPHERES
  
        spheres.rotation.x += 0.5 * 0.01;
        spheres.rotation.y += 0.5 * 0.01;
        spheres.rotation.z += 0.5 * 0.01;
  
        
        
    

        
}

// Render
function render() {
    // ! WARP BUBBLE ----------------------------------------
  
    //bubbleSpec.speed = outsider;
    let t = clock.getElapsedTime()*bubbleSpec.speed;
    //let t = clock.getElapsedTime()*outsider;
    bubbleGeometry.userData.nPos.forEach((p, idx) => {
  	//let ns = noise(p.x, p.y, p.z, t);
     let ns = noise(p.x, p.y, p.z, t); 
    v3.copy(p).multiplyScalar(radius).addScaledVector(p, ns);
    pos.setXYZ(idx, v3.x, v3.y, v3.z);
      
      
     
      
      

  })
  // this changes the scale of the blue floating spheres
  for (let d = 0; d < points.length; d++){
          spheres.scale.x = (planetSpheres.scale);
          spheres.scale.y = (planetSpheres.scale);
          spheres.scale.z = (planetSpheres.scale);
      }
      
  bubbleGeometry.computeVertexNormals();
  pos.needsUpdate = true;




    renderer.render(scene, camera);
    
}
renderer.setAnimationLoop(render);

// Keyboard listeners
function keyDown(event){
  keyMap[event.keyCode] = true;

}

function keyUp(event){
  keyMap[event.keyCode] = false;

}
window.addEventListener("keydown", keyDown);
window.addEventListener("keyup", keyUp);


animate();
